networks:
  app: {}
services:
  # Frontend
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    env_file:
      - front/.env.local
    ports:
      - "3000:3000"
    networks: [app]
  # Gateway API
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    env_file:
      - gateway/.env.prod
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - keycloak
    networks: [app]

  # Keycloak Auth
  keycloak-db:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [app]
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev --import-realm --hostname=auth.local.test --hostname-strict=false
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: authdb
      KC_DB_USERNAME: authuser
      KC_DB_PASSWORD: authpass
    depends_on:
      - keycloak-db
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      app:
        aliases:
          - auth.local.test

  # Catalog Service
  catalog-db:
    image: mongo:latest
    container_name: catalog-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks: [app]

  catalog-service:
    build:
      context: ./catalog-service
      dockerfile: Dockerfile
    env_file:
      - catalog-service/.env.prod
    ports:
      - "SERVER_PORT:${CATALOG_SERVICE_PORT}"
    depends_on:
      - catalog-db
      - rabbitmq
    networks: [app]

  reviews-db:
    image: postgres:16
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: reviewsdb
      POSTGRES_USER: reviewsuser
      POSTGRES_PASSWORD: reviewspass
    volumes:
      - reviews_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reviewsuser -d reviewsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app]
  # Rabbit MQ
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks: [app]
volumes:
  pgdata:
  mongodb_data:
  reviews_pgdata:
