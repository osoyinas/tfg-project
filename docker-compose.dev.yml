networks:
  app: {}
volumes:
  caddy_config:
  pgdata:
  social_pgdata:
  mongodb_data:

services:
  # -------- FRONTEND (opcional, añade host si lo usarás) ----------
  # frontend:
  #   build:
  #     context: ./front
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - front/.env.production
  #   restart: unless-stopped
  #   networks: [app]

  # -------- GATEWAY ----------
  # gateway:
  #   build:
  #     context: ./gateway
  #     dockerfile: Dockerfile
  #   env_file:
  #     - gateway/.env.prod
  #   ports:
  #   - "${GATEWAY_PORT:-8000}:${GATEWAY_PORT:-8000}"
  #   depends_on:
  #     keycloak:
  #       condition: service_started
  #     catalog-service:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks: [app]

  # -------- KEYCLOAK + DB ----------
  keycloak-db:
    image: postgres:16
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks: [app]
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev --import-realm --hostname=auth.local.test --hostname-strict=false
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: authdb
      KC_DB_USERNAME: authuser
      KC_DB_PASSWORD: authpass
    depends_on:
      - keycloak-db
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      app:
        aliases:
          - auth.local.test

  # -------- CATALOG (Mongo + servicio) ----------
  catalog-db:
    image: mongo:8
    command: ["--wiredTigerCacheSizeGB", "1"]
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet --eval 'db.adminCommand({ ping: 1 }).ok' | grep -q 1 || exit 1",
        ]
      interval: 20s
      timeout: 5s
      retries: 15
    restart: unless-stopped
    networks: [app]

  # catalog-service:
  #   build:
  #     context: ./catalog-service
  #     dockerfile: Dockerfile
  #   env_file:
  #     - catalog-service/.env.prod
  #   environment:
  #     SERVER_PORT: "${CATALOG_SERVICE_PORT}"
  #   depends_on:
  #     catalog-db:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   ports:
  #     - "${CATALOG_SERVICE_PORT:-8081}:${CATALOG_SERVICE_PORT:-8081}"
  #   restart: unless-stopped
  #   networks: [app]

  # -------- social DB ----------
  social-db:
    image: postgres:16
    environment:
      POSTGRES_DB: socialdb
      POSTGRES_USER: socialuser
      POSTGRES_PASSWORD: socialpass
    volumes:
      - social_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U socialuser -d socialdb"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    ports:
      - "5433:5432"
    networks: [app]

  # -------- RabbitMQ ----------
  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 20s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [app]
